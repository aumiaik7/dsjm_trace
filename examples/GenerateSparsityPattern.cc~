#include <iostream>
#include "StructuredJacobian.hh"
#include <cstdlib>


using namespace std;

void display_usage(int argc,char *argv[])
{
    fprintf (stderr, "Usage: %s -n number\n", argv[0]);
    exit(1);
}

int main(int argc, char *argv[])
{

    if(argc < 2)
    {
        fprintf (stderr, "Usage: %s -n number\n", argv[0]);
        exit(1);
    }

    int opt = getopt(argc,argv, "n:h?");
    int n = -1;
    while(opt != -1)
    {
        switch(opt)
        {
        case 'n':
            n = atoi(optarg);
            break;
        case 'h':
        case '?':
            display_usage(argc, argv);
        default:
            break;
        }
        opt = getopt(argc,argv, "n:h?");
    }

    if (n == -1)
        exit(1);

    // Build the Structured Jacobian Object with the $n$ parameter.
    StructuredJacobian structuredJacobian(n);

    // Get the Sparsity Pattern from the Object.
    auto_ptr<Sparsity> sparsity = structuredJacobian.getSparsityPattern();

    std::cout << "%%MatrixMarket matrix coordinate pattern general" << std::endl;
    std::cout << n << " " << n << " " << sparsity->size()-1<< std::endl;
    // TODO: The size can be replaced by 8n-16 also for n > 6

    for(int i = 1; i <= sparsity->size()-1 ; i++)
    {
        std::cout <<  (*sparsity)[i].first << " " <<  (*sparsity)[i].second << std::endl;
    }


    return 0;
}
